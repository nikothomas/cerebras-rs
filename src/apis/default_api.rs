/*
 * Cerebras Inference API
 *
 * The Cerebras Inference API offers developers a low-latency solution for AI model inference  powered by Cerebras Wafer-Scale Engines and CS-3 systems. The API provides access to  high-performance language models with unprecedented speed for AI inference workloads. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cerebras.ai
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed successes of method [`create_chat_completion`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateChatCompletionSuccess {
    Status200(models::CreateChatCompletion200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`create_completion`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateCompletionSuccess {
    Status200(models::CreateCompletion200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`list_models`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListModelsSuccess {
    Status200(models::ModelList),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`retrieve_model`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RetrieveModelSuccess {
    Status200(models::Model),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_chat_completion`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateChatCompletionError {
    Status400(models::ErrorDetail),
    Status401(models::ErrorDetail),
    Status422(models::ErrorDetail),
    Status429(models::ErrorDetail),
    Status500(models::ErrorDetail),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_completion`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateCompletionError {
    Status400(models::ErrorDetail),
    Status401(models::ErrorDetail),
    Status422(models::ErrorDetail),
    Status429(models::ErrorDetail),
    Status500(models::ErrorDetail),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_models`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListModelsError {
    Status401(models::ErrorDetail),
    Status429(models::ErrorDetail),
    Status500(models::ErrorDetail),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`retrieve_model`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RetrieveModelError {
    Status401(models::ErrorDetail),
    Status404(models::ErrorDetail),
    Status429(models::ErrorDetail),
    Status500(models::ErrorDetail),
    UnknownValue(serde_json::Value),
}


/// Creates a completion for the chat message
pub async fn create_chat_completion(configuration: &configuration::Configuration, chat_completion_request: models::ChatCompletionRequest) -> Result<ResponseContent<CreateChatCompletionSuccess>, Error<CreateChatCompletionError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_chat_completion_request = chat_completion_request;

    let uri_str = format!("{}/chat/completions", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_chat_completion_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<CreateChatCompletionSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent { status, content, entity })
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateChatCompletionError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Creates a completion for the provided prompt and parameters
pub async fn create_completion(configuration: &configuration::Configuration, completion_request: models::CompletionRequest) -> Result<ResponseContent<CreateCompletionSuccess>, Error<CreateCompletionError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_completion_request = completion_request;

    let uri_str = format!("{}/completions", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_completion_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<CreateCompletionSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent { status, content, entity })
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateCompletionError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists the currently available models and provides essential details about each, including the owner and availability.
pub async fn list_models(configuration: &configuration::Configuration, ) -> Result<ResponseContent<ListModelsSuccess>, Error<ListModelsError>> {

    let uri_str = format!("{}/models", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<ListModelsSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent { status, content, entity })
    } else {
        let content = resp.text().await?;
        let entity: Option<ListModelsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Fetches a model instance, offering key details about the model, including its owner and permissions.
pub async fn retrieve_model(configuration: &configuration::Configuration, model: models::ModelIdentifier) -> Result<ResponseContent<RetrieveModelSuccess>, Error<RetrieveModelError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_model = model;

    let uri_str = format!("{}/models/{model}", configuration.base_path, model=p_model.to_string());
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<RetrieveModelSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent { status, content, entity })
    } else {
        let content = resp.text().await?;
        let entity: Option<RetrieveModelError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

