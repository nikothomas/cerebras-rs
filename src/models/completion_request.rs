/*
 * Cerebras Inference API
 *
 * The Cerebras Inference API offers developers a low-latency solution for AI model inference  powered by Cerebras Wafer-Scale Engines and CS-3 systems. The API provides access to  high-performance language models with unprecedented speed for AI inference workloads. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cerebras.ai
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CompletionRequest {
    #[serde(rename = "model")]
    pub model: models::ModelIdentifier,
    #[serde(rename = "prompt")]
    pub prompt: models::Prompt,
    /// The maximum number of tokens to generate
    #[serde(rename = "max_tokens", skip_serializing_if = "Option::is_none")]
    pub max_tokens: Option<u32>,
    #[serde(rename = "temperature", skip_serializing_if = "Option::is_none")]
    pub temperature: Option<f64>,
    #[serde(rename = "top_p", skip_serializing_if = "Option::is_none")]
    pub top_p: Option<f64>,
    #[serde(rename = "stream", skip_serializing_if = "Option::is_none")]
    pub stream: Option<bool>,
    #[serde(rename = "stop", skip_serializing_if = "Option::is_none")]
    pub stop: Option<models::StopCondition>,
    /// Return raw tokens instead of text
    #[serde(rename = "return_raw_tokens", skip_serializing_if = "Option::is_none")]
    pub return_raw_tokens: Option<bool>,
}

impl CompletionRequest {
    pub fn new(model: models::ModelIdentifier, prompt: models::Prompt) -> CompletionRequest {
        CompletionRequest {
            model,
            prompt,
            max_tokens: None,
            temperature: None,
            top_p: None,
            stream: None,
            stop: None,
            return_raw_tokens: None,
        }
    }
}

