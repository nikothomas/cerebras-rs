#![doc = include_str!("../README.md")]
#![warn(missing_docs)]
#![warn(rustdoc::missing_crate_level_docs)]
{{#models}}{{#model}}#![allow(unused_imports)]{{/model}}{{/models}}
#![allow(clippy::too_many_arguments)]

//! # Cerebras Rust SDK
//! 
//! High-performance Rust SDK for the Cerebras Inference API, providing low-latency
//! AI model inference powered by Cerebras Wafer-Scale Engines and CS-3 systems.
//! 
//! ## Features
//! 
//! - **Async/await support** - Built on tokio for high-performance async operations
//! - **Streaming responses** - Real-time token streaming for chat and completions
//! - **Type-safe API** - Strongly typed requests and responses
//! - **Builder patterns** - Ergonomic API for constructing requests
//! - **Comprehensive error handling** - Detailed error types for all failure modes
//! 
//! ## Quick Start
//! 
//! ```rust,no_run
//! use cerebras_rs::{Client, ChatCompletionRequest, ChatMessage};
//! 
//! #[tokio::main]
//! async fn main() -> Result<(), Box<dyn std::error::Error>> {
//!     let client = Client::new(std::env::var("CEREBRAS_API_KEY")?);
//!     
//!     let request = ChatCompletionRequest::builder()
//!         .model("llama3.1-8b")
//!         .message(ChatMessage::user("Hello, how are you?"))
//!         .build();
//!     
//!     let response = client.chat_completions(request).await?;
//!     println!("{}", response.choices[0].message.content);
//!     
//!     Ok(())
//! }
//! ```

extern crate serde;
extern crate serde_json;
extern crate serde_repr;
extern crate url;
extern crate reqwest;
extern crate uuid;
extern crate chrono;
extern crate base64;

{{#supportAsync}}
extern crate tokio;
extern crate async_trait;
{{/supportAsync}}

#[cfg(feature = "stream")]
extern crate tokio_stream;
#[cfg(feature = "stream")]
extern crate futures_util;
#[cfg(feature = "stream")]
extern crate eventsource_stream;
#[cfg(feature = "stream")]
extern crate pin_project_lite;

extern crate thiserror;
extern crate anyhow;

pub mod apis;
pub mod models;

// Re-export commonly used types at the crate root
pub use apis::configuration::{ApiKey, Configuration};
pub use apis::default_api as api;

// Re-export all models at the crate root for convenience
pub use models::*;

// Re-export the main client
mod client;
pub use client::Client;

// Builder patterns
pub mod builders;

// Streaming support
#[cfg(feature = "stream")]
pub mod streaming;

// Error handling
mod error;
pub use error::{Error, Result};

// Prelude module for convenient imports
pub mod prelude {
    //! The prelude module provides convenient imports for common usage.
    //! 
    //! # Example
    //! ```rust
    //! use cerebras_rs::prelude::*;
    //! ```
    
    pub use crate::{
        Client,
        Error,
        Result,
        ChatCompletionRequest,
        ChatMessage,
        CompletionRequest,
        ModelIdentifier,
    };
    
    #[cfg(feature = "stream")]
    pub use crate::streaming::{StreamHandler, ChatCompletionStream, CompletionStream};
    
    pub use crate::builders::{ChatCompletionBuilder, CompletionBuilder};
}

// Version information
/// The version of the Cerebras Rust SDK
pub const VERSION: &str = env!("CARGO_PKG_VERSION");

/// The OpenAPI specification version this SDK was generated from
pub const OPENAPI_VERSION: &str = "{{appVersion}}";
