openapi: 3.0.3
info:
  title: Cerebras Inference API
  description: |
    The Cerebras Inference API offers developers a low-latency solution for AI model inference 
    powered by Cerebras Wafer-Scale Engines and CS-3 systems. The API provides access to 
    high-performance language models with unprecedented speed for AI inference workloads.
  version: "1.0.0"
  contact:
    name: Cerebras Support
    url: https://inference-docs.cerebras.ai
  license:
    name: Cerebras Terms of Service
    url: https://cerebras.ai/terms

servers:
  - url: https://api.cerebras.ai/v1
    description: Production server

security:
  - ApiKeyAuth: []

paths:
  /models:
    get:
      summary: List available models
      description: Lists the currently available models and provides essential details about each, including the owner and availability.
      operationId: listModels
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /models/{model}:
    get:
      summary: Retrieve a model
      description: Fetches a model instance, offering key details about the model, including its owner and permissions.
      operationId: retrieveModel
      parameters:
        - name: model
          in: path
          required: true
          description: The model identifier
          schema:
            $ref: '#/components/schemas/ModelIdentifier'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /chat/completions:
    post:
      summary: Create chat completion
      description: Creates a completion for the chat message
      operationId: createChatCompletion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCompletionRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CreateChatCompletionResponse'
                  - $ref: '#/components/schemas/ChatCompletionChunk'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/ChatCompletionChunk'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/UnprocessableEntityError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /completions:
    post:
      summary: Create text completion
      description: Creates a completion for the provided prompt and parameters
      operationId: createCompletion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletionRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CreateCompletionResponse'
                  - $ref: '#/components/schemas/CompletionChunk'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/CompletionChunk'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/UnprocessableEntityError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    ApiKeyAuth:
      type: http
      scheme: bearer
      description: API key authentication via Authorization header

  schemas:
    ModelList:
      type: object
      properties:
        object:
          type: string
          enum: [list]
        data:
          type: array
          items:
            $ref: '#/components/schemas/Model'

    Model:
      type: object
      properties:
        id:
          type: string
          description: The model identifier
        object:
          type: string
          enum: [model]
        created:
          type: integer
          description: Unix timestamp of when the model was created
        owned_by:
          type: string
          description: Organization that owns the model

    ModelIdentifier:
      type: string
      enum:
        - llama-4-scout-17b-16e-instruct
        - llama3.1-8b
        - llama-3.3-70b
        - qwen-3-32b
        - deepseek-r1-distill-llama-70b

    StopCondition:
      oneOf:
        - type: string
        - type: array
          items:
            type: string

    FunctionDefinition:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
        description:
          type: string
          description: A description of what the function does, used by the model to choose when and how to call the function.
        parameters:
          type: object
          description: The parameters the function accepts, described as a JSON Schema object.
          additionalProperties: true

    Tool:
      type: object
      properties:
        type:
          type: string
          enum: [function]
        function:
          $ref: '#/components/schemas/FunctionDefinition'

    ChatCompletionRequest:
      type: object
      required:
        - model
        - messages
      properties:
        model:
          $ref: '#/components/schemas/ModelIdentifier'
        messages:
          type: array
          description: A list of messages comprising the conversation so far
          items:
            $ref: '#/components/schemas/ChatMessage'
        max_tokens:
          type: integer
          description: The maximum number of tokens that can be generated in the completion
          minimum: 1
        temperature:
          type: number
          description: Sampling temperature to use
          minimum: 0
          maximum: 2
          default: 1
        top_p:
          type: number
          description: Nucleus sampling parameter
          minimum: 0
          maximum: 1
          default: 1
        stream:
          type: boolean
          description: If set, partial message deltas will be sent
          default: false
        stop:
          $ref: '#/components/schemas/StopCondition'
        response_format:
          $ref: '#/components/schemas/ResponseFormat'
        tools:
          type: array
          items:
            $ref: '#/components/schemas/Tool'
        tool_choice:
          $ref: '#/components/schemas/ToolChoiceOption'

    ChatMessage:
      type: object
      required:
        - role
        - content
      properties:
        role:
          type: string
          enum: [system, user, assistant, tool]
        content:
          type: string
          description: The contents of the message
        name:
          type: string
          description: The name of the author of this message
        tool_calls:
          type: array
          items:
            $ref: '#/components/schemas/FunctionCall'
        tool_call_id:
          type: string
          description: Tool call that this message is responding to

    ResponseFormat:
      type: object
      properties:
        type:
          type: string
          enum: [text, json_schema]
        json_schema:
          $ref: '#/components/schemas/JsonSchema'

    JsonSchema:
      type: object
      properties:
        name:
          type: string
          description: The name of the schema
        strict:
          type: boolean
          description: Whether to enforce strict schema compliance
        schema:
          type: object
          description: The JSON schema definition

    FunctionName:
      type: object
      properties:
        name:
          type: string
          description: The name of the function

    FunctionCall:
      type: object
      properties:
        name:
          type: string
          description: The name of the function
        arguments:
          type: string
          description: The arguments of the function

    ChatCompletion:
      type: object
      properties:
        id:
          type: string
        object:
          type: string
          enum: [chat.completion]
        created:
          type: integer
        model:
          type: string
        system_fingerprint:
          type: string
        choices:
          type: array
          items:
            $ref: '#/components/schemas/ChatChoice'
        usage:
          $ref: '#/components/schemas/Usage'
        time_info:
          $ref: '#/components/schemas/TimeInfo'

    ChatChoice:
      type: object
      properties:
        index:
          type: integer
        message:
          $ref: '#/components/schemas/ChatMessage'
        finish_reason:
          type: string
          enum: [stop, length, tool_calls, content_filter]

    ChatCompletionChunk:
      type: object
      properties:
        id:
          type: string
        object:
          type: string
          enum: [chat.completion.chunk]
        created:
          type: integer
        model:
          type: string
        system_fingerprint:
          type: string
        choices:
          type: array
          items:
            $ref: '#/components/schemas/ChatChoiceDelta'

    ChatChoiceDelta:
      type: object
      properties:
        index:
          type: integer
        delta:
          $ref: '#/components/schemas/ChatMessageDelta'
        finish_reason:
          type: string
          enum: [stop, length, tool_calls, content_filter]

    ChatMessageDelta:
      type: object
      properties:
        role:
          type: string
          enum: [assistant]
        content:
          type: string
        tool_calls:
          type: array
          items:
            $ref: '#/components/schemas/FunctionCall'

    CompletionRequest:
      type: object
      required:
        - model
        - prompt
      properties:
        model:
          $ref: '#/components/schemas/ModelIdentifier'
        prompt:
          $ref: '#/components/schemas/Prompt'
          description: The prompt(s) to generate completions for
          default: ""
        max_tokens:
          type: integer
          description: The maximum number of tokens to generate
          minimum: 1
        temperature:
          type: number
          minimum: 0
          maximum: 2
          default: 1
        top_p:
          type: number
          minimum: 0
          maximum: 1
          default: 1
        stream:
          type: boolean
          default: false
        stop:
          $ref: '#/components/schemas/StopCondition'
        return_raw_tokens:
          type: boolean
          description: Return raw tokens instead of text
          default: false

    Completion:
      type: object
      properties:
        id:
          type: string
        object:
          type: string
          enum: [text_completion]
        created:
          type: integer
        model:
          type: string
        system_fingerprint:
          type: string
        choices:
          type: array
          items:
            $ref: '#/components/schemas/CompletionChoice'
        usage:
          $ref: '#/components/schemas/Usage'
        time_info:
          $ref: '#/components/schemas/TimeInfo'

    CompletionChoice:
      type: object
      properties:
        index:
          type: integer
        text:
          type: string
        finish_reason:
          type: string
          enum: [stop, length]

    CompletionChunk:
      type: object
      properties:
        id:
          type: string
        object:
          type: string
          enum: [text_completion.chunk]
        created:
          type: integer
        model:
          type: string
        choices:
          type: array
          items:
            $ref: '#/components/schemas/CompletionChoiceDelta'

    CompletionChoiceDelta:
      type: object
      properties:
        index:
          type: integer
        text:
          type: string
        finish_reason:
          type: string
          enum: [stop, length]

    Usage:
      type: object
      properties:
        prompt_tokens:
          type: integer
        completion_tokens:
          type: integer
        total_tokens:
          type: integer

    TimeInfo:
      type: object
      properties:
        queue_time:
          type: number
          description: Time spent in queue (seconds)
        prompt_time:
          type: number
          description: Time spent processing prompt (seconds)
        completion_time:
          type: number
          description: Time spent generating completion (seconds)
        total_time:
          type: number
          description: Total time for the request (seconds)
        created:
          type: integer
          description: Unix timestamp when the response was created

    CreateChatCompletionResponse:
      type: object
      properties:
        id:
          type: string
        object:
          type: string
        created:
          type: integer
        model:
          type: string
        choices:
          type: array
          items:
            $ref: '#/components/schemas/ChatChoice'
        usage:
          $ref: '#/components/schemas/Usage'
        time_info:
          $ref: '#/components/schemas/TimeInfo'

    CreateCompletionResponse:
      type: object
      properties:
        id:
          type: string
        object:
          type: string
        created:
          type: integer
        model:
          type: string
        choices:
          type: array
          items:
            $ref: '#/components/schemas/CompletionChoice'
        usage:
          $ref: '#/components/schemas/Usage'
        time_info:
          $ref: '#/components/schemas/TimeInfo'

    ToolChoiceOption:
      oneOf:
        - type: string
          enum: [none, auto]
        - $ref: '#/components/schemas/FunctionName'

    Prompt:
      oneOf:
        - type: string
        - type: array
          items:
            type: string

    ErrorDetail:
      type: object
      properties:
        type:
          type: string
        code:
          type: string
        message:
          type: string
        param:
          type: string

  responses:
    BadRequestError:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDetail'

    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDetail'

    NotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDetail'

    UnprocessableEntityError:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDetail'

    RateLimitError:
      description: Rate Limit Exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDetail'

    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDetail'